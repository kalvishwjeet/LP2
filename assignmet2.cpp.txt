#include<bits/stdc++.h>
#define n 3
using namespace std;

class Node
{
	public:
		
		int mat[n][n];
		int x , y , cost ,level ;
		Node* parent;
};

class comp
{
	public :
		
		bool operator() (const Node* lhs ,const Node* rhs) const
		{
			return (lhs->level + lhs->cost ) > (rhs->level + rhs->cost);
		}
};

Node* newnode(int mat[n][n] ,int x ,int y ,int nx ,int ny , int level ,Node* parent)
{
	Node* node;
	node = new Node ;
	
	memcpy(node->mat , mat ,sizeof node->mat);
	swap(node->mat[x][y] ,node->mat[nx][ny]);
	node->x = nx ;
	node->y = ny ;
	node->cost = INT_MAX ;
	node->level = level ;
	node->parent = parent;
	return node;
}



int calculate_cost(int ini[n][n] ,int final[n][n])
{
	int cnt = 0;
	
	for(int i = 0; i < n ;i++)
	{
		for(int j = 0 ; j < n ;j++)
		{
			if(ini[i][j] && (ini[i][j] != final[i][j])){
				cnt++;
			}
		}
	}
	
	return cnt;
}

void print_mat(int init[n][n] ,int level ,int cost)
{
	for(int i = 0; i < n ; i++)
	{
		for(int j = 0; j < n ;j++)
		{
			cout<<init[i][j]<<" ";
		}
		cout<<endl;
	}
	
	cout<<"G(x) : "<<level<<endl;
	cout<<"H(x) : "<<cost<<endl;
}

void print_path(Node* root ,int final[n][n])
{
	if(root == NULL)
	{
		return ;
	}
	
	print_path(root->parent , final);
	print_mat(root->mat , root->level ,root->cost);
}

bool is_safe(int i ,int j)
{
	if(i < 0 || i >= n || j < 0 || j >= n)
	{
		return 0;
	}
	
	return 1;
}

void solve(int ini[n][n] ,int final[n][n] ,int x ,int y)
{
	priority_queue<Node* ,vector<Node*> ,comp>pq;
	
	Node* root;
	root = newnode(ini , x ,y ,x ,y,0 , NULL);
	root->cost = calculate_cost(ini, final );
	pq.push(root);
	
	vector<int>xdir = {1 , 0 , -1 , 0};
	vector<int>ydir = {0 , 1 , 0 , -1};
	
	while(!pq.empty())
	{
		Node* curr;
		curr = pq.top() ;pq.pop();
		
		//cout<<curr->level<<endl;
		
		int cost = calculate_cost(curr->mat , final );
		if(cost == 0)
		{
			print_path(curr , final );
			return ;
		}
		
		int level = curr->level;
		int x = curr->x;
		int y = curr->y;
		
		for(int i = 0 ; i < 4 ; i++)
		{
			int nx = x + xdir[i];
			int ny = y + ydir[i];
			
			if(is_safe(nx ,ny))
			{
				Node* child;
				child = newnode(curr->mat , x , y , nx , ny , level+1 , curr);
				child->cost = calculate_cost(child->mat , final );
				pq.push(child);
			}
		}
		
	}
}
int main()
{
	int initial[n][n] =
    {
        {1, 2, 3},
        {5, 6, 0},
        {7, 8, 4}
    };
 
    int final[n][n] =
    {
        {1, 2, 3},
        {5, 8, 6},
        {0, 7, 4}
    };
	
	int x = 1;
	int y = 2;
	int cost = calculate_cost(initial , final );
	print_mat(initial ,-1 , cost);
	print_mat(final ,-1 , cost);
	solve( initial , final , x , y);
	
}
